== 0.3.1 / 20100509
  * Modified ZMQ::Message so we have both an UnmanagedMessage where
  memory management is manual via the #close method, and Message where
  memory management is automated via a finalizer method run during
  garbage collection.
  
  * Updated ZMQ::Message docs to make it clearer how to use a subclass
  and FFI::Struct to lazily access the message buffer. This gets us as
  close to zero-copy as possible for performance.
  
  * Fixed a memory leak in Message where the FFI::Struct backing the
  C struct was not being freed.
  
  * Tested the FFI code against MRI 1.8.x and 1.9.x. It works!
  
  * Patched a potential problem in LibZMQ::MessageDeallocator. It was
  crashing under MRI because it complained that FFI::Pointer did not
  have a free method. It now checks for :free before calling it. 
  Need to investigate this further because it never happened under
  JRuby.
  
  * Modified the Socket constructor slightly to allow for using
  unmanaged or managed messages.
  
  * Changed the /examples to print a throughput (msgs/s) number upon
  completion.

== 0.3.0 / 20100507
* ZMQ::Socket#send and ZMQ::Socket#recv semantics changed
  * The official 0mq ruby bindings utilize strings for #send and #recv.
    However, to do so requires lots of copying to and from buffers which
    greatly impacts performance. These methods now return a ZMQ::Message
    object which can be subclassed to do lazy evaluation of the buffer.
    
  * Added ZMQ::Socket#send_string and ZMQ::Socket#recv_string. They
    automatically convert the messages to strings just like the official
    0mq ruby bindings.

  * Fixed bug in ZMQ::Util#error_string
  
  * Split the ZMQ::Message class into two classes. The base class called
    UnmanagedMessage requires manual memory management. The Message
    class (used by default by Socket) has a finalizer defined to
    automatically release memory when the message object gets garbage
    collected.
  
  
== 0.2.0 / 20100505

* 1 major enhancement
  * Birthday!
